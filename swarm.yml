version: '3'

services: 
  caddy:
    image: miq84/micro-caddy:1.0.0
    deploy:
      mode: replicated
      replicas: 1
    ports:
      - "80:80"
      # ssl encrypted port
      - "443:443"
    # every time docker redeploy, will request new certificate thus we need virtual volume
    volumes:
      - caddy_data:/data
      - caddy_config:/config
  
  broker-service: 
    image: miq84/broker-service:1.0.1
    # commented as to not expose ports
    # ports:
    #   - "8080:8080"
    deploy:
      mode: replicated
      replicas: 1

  front-end:
    image: miq84/front-end:1.0.0
    deploy: 
      mode: replicated
      replicas: 1

  listener-service: 
    image: miq84/listener-service:1.0.0
    deploy:
      mode: replicated
      replicas: 1

  authentication-service: 
    image: miq84/authentication-service:1.0.0
    deploy:
      mode: replicated
      replicas: 1
    environment:
      DSN: "user=postgres host=postgres port=5432 password=password dbname=users timezone=UTC connect_timeout=5"

  logger-service: 
    image: miq84/logger-service:1.0.1
    deploy:
      mode: replicated
      replicas: 1

  mailer-service: 
    image: miq84/mail-service:1.0.0
    deploy:
      mode: replicated
      replicas: 1
    environment:
      MAIL_DOMAIN: localhost
      MAIL_HOST: mailhog
      MAIL_PORT: 1025
      MAIL_ENCRYPTION: none
      MAIL_USERNAME: ""
      MAIL_PASSWORD: ""
      FROM_NAME: "John Smith"
      FROM_ADDRESS: john.smith@example.com

  rabbitmq:
    image: 'rabbitmq:3.9-alpine'
    deploy:
      # one instance, this will run on container itself instead of outside volume
      mode: global
    
  mailhog:
    image: 'jcalonso/mailhog:latest'
    ports: 
      - "8025:8025"
    deploy:
      mode: global

  mongo:
    image: 'mongo:4.2.16-bionic'
    ports:
      # probably don't have local port in production
      - "27017:27017"
    deploy:
      mode: global
    environment:
      MONGO_INITDB_DATABASE: logs  
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
    volumes:
      # vol mapping allows for persistent data
      - ./db-data/mongo/:/data/db 

  # starting with mongo as part of swarm
  # also can have postgres as own instance on own server
  # connect swarm to postgres
  postgres:
    image: 'postgres:14.2'
    ports:
      - "5432:5432"
    restart: always
    deploy:
      mode: replicated
      replicas: 1
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: users
    volumes:
      - ./db-data/postgres/:/var/lib/postgresql/data/

volumes:
  caddy_data:
    # docker does not create nor delete
    external: true
  caddy_config: